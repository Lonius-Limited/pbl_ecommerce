import { PropsWithChildren } from "react";
import { FrappeApp, FrappeAuth, FrappeCall } from "frappe-js-sdk";
import { FrappeDB } from "frappe-js-sdk/lib/db";
import { FrappeFileUpload } from "frappe-js-sdk/lib/file";
import { Error } from 'frappe-js-sdk/lib/frappe_app/types';
import { Filter, FrappeDoc, GetDocListArgs } from 'frappe-js-sdk/lib/db/types';
import { SWRConfiguration, SWRResponse } from 'swr';
import { FileArgs } from 'frappe-js-sdk/lib/file/types';
export type { SWRConfiguration, SWRResponse };
export type { FrappeDoc, GetDocListArgs, Filter, FileArgs, Error };
export interface FrappeConfig {
    /** The URL of your Frappe server */
    url: string;
    app: FrappeApp;
    auth: FrappeAuth;
    db: FrappeDB;
    call: FrappeCall;
    file: FrappeFileUpload;
}
export declare const FrappeContext: import("react").Context<FrappeConfig | null>;
declare type FrappeProviderProps = PropsWithChildren<{
    url?: string;
}>;
export declare const FrappeProvider: ({ url, children }: FrappeProviderProps) => JSX.Element;
/**
 * Hook to start listening to user state and provides functions to login/logout
 *
 * @param options - [Optional] SWRConfiguration options for fetching current logged in user
 * @returns Returns an object with the following properties: currentUser, loading, error, and functions to login, logout and updateCurrentUser
 */
export declare const useFrappeAuth: (options?: Partial<import("swr/dist/types").PublicConfiguration<any, any, import("swr").BareFetcher<any>>> | undefined) => {
    /** The current logged in user. Will be null/undefined if user is not logged in */
    currentUser: string | null | undefined;
    /** Will be true when the hook is fetching (or revalidating) the user state. (Refer to isValidating in useSWR)  */
    isValidating: boolean;
    /** Error object returned from API call */
    error: Error | null | undefined;
    /** Function to login the user with email and password */
    login: (username: string, password: string) => Promise<void>;
    /** Function to log the user out */
    logout: () => Promise<any>;
    /** Function to fetch updated user state */
    updateCurrentUser: () => void;
};
/**
 * Hook to fetch a document from the database
 *
 *
 * @param doctype - The doctype to fetch
 * @param name - the name of the document to fetch
 * @param options [Optional] SWRConfiguration options for fetching data
 * @returns an object (SWRResponse) with the following properties: data, error, isValidating, and mutate
 *
 * @typeParam T - The type of the document
 */
export declare const useFrappeGetDoc: <T>(doctype: string, name?: string | undefined, options?: Partial<import("swr/dist/types").PublicConfiguration<any, any, import("swr").BareFetcher<any>>> | undefined) => SWRResponse<FrappeDoc<T>, Error>;
/**
 * Function that returns a query string for all arguments passed to getDocList function
 * @param args - The arguments to pass to the getDocList method
 * @returns query string to be appended to the url for the API call
 */
export declare const getDocListQueryString: (args?: GetDocListArgs | undefined) => string;
/**
 * Hook to fetch a list of documents from the database
 *
 * @param doctype Name of the doctype to fetch
 * @param args Arguments to pass (filters, pagination, etc)
 * @param options [Optional] SWRConfiguration options for fetching data
 * @returns an object (SWRResponse) with the following properties: data, error, isValidating, and mutate
 *
* @typeParam T - The type definition of the document object
 */
export declare const useFrappeGetDocList: <T>(doctype: string, args?: GetDocListArgs | undefined, options?: Partial<import("swr/dist/types").PublicConfiguration<any, any, import("swr").BareFetcher<any>>> | undefined) => SWRResponse<T[], Error>;
/**
 * Hook to create a document in the database and maintain loading and error states
 * @returns Object with the following properties: loading, error, isCompleted and createDoc and reset functions
 */
export declare const useFrappeCreateDoc: <T>() => {
    /** Function to create a document in the database */
    createDoc: (doctype: string, doc: T) => Promise<FrappeDoc<T>>;
    /** Will be true when the API request is pending.  */
    loading: boolean;
    /** Error object returned from API call */
    error: Error | null | undefined;
    /** Will be true if document is created. Else false */
    isCompleted: boolean;
    /** Function to reset the state of the hook */
    reset: () => void;
};
/**
 * Hook to update a document in the database and maintain loading and error states
 * @returns Object with the following properties: loading, error, isCompleted and updateDoc and reset functions
 */
export declare const useFrappeUpdateDoc: <T>() => {
    /** Function to update a document in the database */
    updateDoc: (doctype: string, docname: string | null, doc: Partial<T>) => Promise<FrappeDoc<T>>;
    /** Will be true when the API request is pending.  */
    loading: boolean;
    /** Error object returned from API call */
    error: Error | null | undefined;
    /** Will be true if document is created. Else false */
    isCompleted: boolean;
    /** Function to reset the state of the hook */
    reset: () => void;
};
/**
 * Hook to delete a document in the database and maintain loading and error states
 * @returns Object with the following properties: loading, error, isCompleted and deleteDoc and reset functions
 */
export declare const useFrappeDeleteDoc: () => {
    /** Function to delete a document in the database. Returns a promise which resolves to an object with message "ok" if successful */
    deleteDoc: (doctype: string, docname?: string | null | undefined) => Promise<{
        message: string;
    }>;
    /** Will be true when the API request is pending.  */
    loading: boolean;
    /** Error object returned from API call */
    error: Error | null | undefined;
    /** Will be true if document is created. Else false */
    isCompleted: boolean;
    /** Function to reset the state of the hook */
    reset: () => void;
};
/**
 * Hook to fetch number of documents from the database
 *
 *
 * @param doctype - The doctype to fetch
 * @param filters - filters to apply to the query
 * @param cache - Whether to cache the result or not. Defaults to false
 * @param debug - Whether to log debug messages or not. Defaults to false
 * @param options [Optional] SWRConfiguration options for fetching data
 * @returns an object (SWRResponse) with the following properties: data (number), error, isValidating, and mutate
 *
 */
export declare const useFrappeGetDocCount: (doctype: string, filters?: Filter[] | undefined, cache?: boolean, debug?: boolean, options?: Partial<import("swr/dist/types").PublicConfiguration<any, any, import("swr").BareFetcher<any>>> | undefined) => SWRResponse<number, Error>;
/**
 *  Hook to make a GET request to the server
 *
 * @param method - name of the method to call (will be dotted path e.g. "frappe.client.get_list")
 * @param params - parameters to pass to the method
 * @param swrKey - optional SWRKey that will be used to cache the result. If not provided, the method name with the URL params will be used as the key
 * @param options [Optional] SWRConfiguration options for fetching data
 *
 * @typeParam T - Type of the data returned by the method
 * @returns an object (SWRResponse) with the following properties: data (number), error, isValidating, and mutate
 */
export declare const useFrappeGetCall: <T>(method: string, params?: Record<string, any> | undefined, swrKey?: string | undefined, options?: Partial<import("swr/dist/types").PublicConfiguration<any, any, import("swr").BareFetcher<any>>> | undefined) => SWRResponse<T, Error>;
/**
 *
 * @param method - name of the method to call (POST request) (will be dotted path e.g. "frappe.client.set_value")
 * @returns an object with the following properties: loading, error, isCompleted , result, and call and reset functions
 */
export declare const useFrappePostCall: <T>(method: string) => {
    /** Function to call the method. Returns a promise which resolves to the data returned by the method */
    call: (params: Record<string, any>) => Promise<T>;
    /** The result of the API call */
    result: T | null;
    /** Will be true when the API request is pending.  */
    loading: boolean;
    /** Error object returned from API call */
    error: Error | null;
    /** Will be true if API call is successful. Else false */
    isCompleted: boolean;
    /** Function to reset the state of the hook */
    reset: () => void;
};
/**
 *
 * @param method - name of the method to call (PUT request) (will be dotted path e.g. "frappe.client.set_value")
 * @returns an object with the following properties: loading, error, isCompleted , result, and call and reset functions
 */
export declare const useFrappePutCall: <T>(method: string) => {
    /** Function to call the method. Returns a promise which resolves to the data returned by the method */
    call: (params: Record<string, any>) => Promise<T>;
    /** The result of the API call */
    result: T | null;
    /** Will be true when the API request is pending.  */
    loading: boolean;
    /** Error object returned from API call */
    error: Error | null;
    /** Will be true if API call is successful. Else false */
    isCompleted: boolean;
    /** Function to reset the state of the hook */
    reset: () => void;
};
/**
 *
 * @param method - name of the method to call (DELETE request) (will be dotted path e.g. "frappe.client.delete")
 * @returns an object with the following properties: loading, error, isCompleted , result, and call and reset functions
 */
export declare const useFrappeDeleteCall: <T>(method: string) => {
    /** Function to call the method. Returns a promise which resolves to the data returned by the method */
    call: (params: Record<string, any>) => Promise<T>;
    /** The result of the API call */
    result: T | null;
    /** Will be true when the API request is pending.  */
    loading: boolean;
    /** Error object returned from API call */
    error: Error | null;
    /** Will be true if API call is successful. Else false */
    isCompleted: boolean;
    /** Function to reset the state of the hook */
    reset: () => void;
};
export interface FrappeFileUploadResponse {
    /** Name of the file documnet in the database */
    "name": string;
    "owner": string;
    "creation": string;
    "modified": string;
    "modified_by": string;
    "docstatus": 0 | 1 | 2;
    "idx": number;
    /** Name of the uploaded file */
    "file_name": string;
    /** File is not accessible by guest users */
    "is_private": 1 | 0;
    "is_home_folder": 0 | 1;
    "is_attachments_folder": 0 | 1;
    /** File size in bytes */
    "file_size": number;
    /** Path of the file ex: /private/files/file_name.jpg  */
    "file_url": string;
    "folder": string;
    "is_folder": 0 | 1;
    /** Doctype the file is linked to */
    "attached_to_doctype": string;
    /** Document the file is linked to */
    "attached_to_name": string;
    "content_hash": string;
    "uploaded_to_dropbox": 0 | 1;
    "uploaded_to_google_drive": 0 | 1;
    "doctype": "File";
}
/**
 * Hook to upload files to the server
 *
 * @returns an object with the following properties: loading, error, isCompleted , result, and call and reset functions
 */
export declare const useFrappeFileUpload: () => {
    /** Function to upload the file */
    upload: (file: File, args: FileArgs) => Promise<FrappeFileUploadResponse>;
    /** Upload Progress in % - rounded off */
    progress: number;
    /** Will be true when the file is being uploaded  */
    loading: boolean;
    /** Error object returned from API call */
    error: Error | null;
    /** Will be true if file upload is successful. Else false */
    isCompleted: boolean;
    /** Function to reset the state of the hook */
    reset: () => void;
};
export interface SearchResult {
    value: string;
    label: string;
    description: string;
}
/**
 * Hook to search for documents
 *
  * @param doctype - name of the doctype (table) where we are performing our search
  * @param text - search text
  * @param filters - (optional) the results will be filtered based on these
  * @param limit - (optional) the number of results to return. Defaults to 20
  * @param debounce - (optional) the number of milliseconds to wait before making the API call. Defaults to 250ms.
  * @returns result - array of type SearchResult with a list of suggestions based on search text
  */
export declare const useSearch: (doctype: string, text: string, filters?: Filter[], limit?: number, debounce?: number) => SWRResponse<{
    results: SearchResult[];
}, Error>;
